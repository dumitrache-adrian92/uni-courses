/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _OAUTH_H_RPCGEN
#define _OAUTH_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define USER_ID_LENGTH 15
#define TOKEN_LEN 15

enum return_code {
	OK = 0,
	USER_NOT_FOUND = 1,
	REQUEST_DENIED = 2,
	NOT_SIGNED = 3,
	PERMISSION_GRANTED = 4,
	SIGNED = 5,
	PERMISSION_DENIED = 6,
	TOKEN_EXPIRED = 7,
	RESOURCE_NOT_FOUND = 8,
	OPERATION_NOT_PERMITTED = 9,
};
typedef enum return_code return_code;

struct authorization_token_response {
	enum return_code code;
	char *auth_request_token;
};
typedef struct authorization_token_response authorization_token_response;

struct access_token_request {
	char *request_token;
	char *id;
	bool_t refresh;
};
typedef struct access_token_request access_token_request;

struct access_token_response {
	enum return_code code;
	char *access_token;
	char *refresh_token;
	int lifetime;
};
typedef struct access_token_response access_token_response;

struct token_approval_request {
	char *request_token;
};
typedef struct token_approval_request token_approval_request;

struct token_approval_response {
	enum return_code code;
	char *request_token;
};
typedef struct token_approval_response token_approval_response;

enum action {
	READ = 0,
	MODIFY = 1,
	DELETE = 2,
	INSERT = 3,
	EXECUTE = 4,
	ERROR = 5,
};
typedef enum action action;

struct action_request {
	char *user_id;
	char *resource;
	enum action act;
	char *action_name;
	char *access_token;
};
typedef struct action_request action_request;

#define OAUTH 0x1337
#define OAUTH_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define REQUEST_AUTHORIZATION 1
extern  authorization_token_response * request_authorization_1(char **, CLIENT *);
extern  authorization_token_response * request_authorization_1_svc(char **, struct svc_req *);
#define REQUEST_ACCESS_TOKEN 2
extern  access_token_response * request_access_token_1(access_token_request *, CLIENT *);
extern  access_token_response * request_access_token_1_svc(access_token_request *, struct svc_req *);
#define APPROVE_REQUEST_TOKEN 3
extern  token_approval_response * approve_request_token_1(token_approval_request *, CLIENT *);
extern  token_approval_response * approve_request_token_1_svc(token_approval_request *, struct svc_req *);
#define VALIDATE_DELEGATED_ACTION 4
extern  enum return_code * validate_delegated_action_1(action_request *, CLIENT *);
extern  enum return_code * validate_delegated_action_1_svc(action_request *, struct svc_req *);
extern int oauth_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define REQUEST_AUTHORIZATION 1
extern  authorization_token_response * request_authorization_1();
extern  authorization_token_response * request_authorization_1_svc();
#define REQUEST_ACCESS_TOKEN 2
extern  access_token_response * request_access_token_1();
extern  access_token_response * request_access_token_1_svc();
#define APPROVE_REQUEST_TOKEN 3
extern  token_approval_response * approve_request_token_1();
extern  token_approval_response * approve_request_token_1_svc();
#define VALIDATE_DELEGATED_ACTION 4
extern  enum return_code * validate_delegated_action_1();
extern  enum return_code * validate_delegated_action_1_svc();
extern int oauth_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_return_code (XDR *, return_code*);
extern  bool_t xdr_authorization_token_response (XDR *, authorization_token_response*);
extern  bool_t xdr_access_token_request (XDR *, access_token_request*);
extern  bool_t xdr_access_token_response (XDR *, access_token_response*);
extern  bool_t xdr_token_approval_request (XDR *, token_approval_request*);
extern  bool_t xdr_token_approval_response (XDR *, token_approval_response*);
extern  bool_t xdr_action (XDR *, action*);
extern  bool_t xdr_action_request (XDR *, action_request*);

#else /* K&R C */
extern bool_t xdr_return_code ();
extern bool_t xdr_authorization_token_response ();
extern bool_t xdr_access_token_request ();
extern bool_t xdr_access_token_response ();
extern bool_t xdr_token_approval_request ();
extern bool_t xdr_token_approval_response ();
extern bool_t xdr_action ();
extern bool_t xdr_action_request ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_OAUTH_H_RPCGEN */
