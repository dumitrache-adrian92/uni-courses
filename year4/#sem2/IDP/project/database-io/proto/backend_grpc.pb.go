// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: proto/backend.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BusinessLogic_GetData_FullMethodName       = "/backend.businessLogic/GetData"
	BusinessLogic_PostData_FullMethodName      = "/backend.businessLogic/PostData"
	BusinessLogic_UpdateData_FullMethodName    = "/backend.businessLogic/UpdateData"
	BusinessLogic_DeleteData_FullMethodName    = "/backend.businessLogic/DeleteData"
	BusinessLogic_GetStatistics_FullMethodName = "/backend.businessLogic/GetStatistics"
)

// BusinessLogicClient is the client API for BusinessLogic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessLogicClient interface {
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*Reply, error)
	PostData(ctx context.Context, in *PostDataRequest, opts ...grpc.CallOption) (*Reply, error)
	UpdateData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*Reply, error)
	DeleteData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*Reply, error)
	GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*Reply, error)
}

type businessLogicClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessLogicClient(cc grpc.ClientConnInterface) BusinessLogicClient {
	return &businessLogicClient{cc}
}

func (c *businessLogicClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, BusinessLogic_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessLogicClient) PostData(ctx context.Context, in *PostDataRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, BusinessLogic_PostData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessLogicClient) UpdateData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, BusinessLogic_UpdateData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessLogicClient) DeleteData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, BusinessLogic_DeleteData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessLogicClient) GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, BusinessLogic_GetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessLogicServer is the server API for BusinessLogic service.
// All implementations must embed UnimplementedBusinessLogicServer
// for forward compatibility.
type BusinessLogicServer interface {
	GetData(context.Context, *GetDataRequest) (*Reply, error)
	PostData(context.Context, *PostDataRequest) (*Reply, error)
	UpdateData(context.Context, *UpdateDataRequest) (*Reply, error)
	DeleteData(context.Context, *DeleteDataRequest) (*Reply, error)
	GetStatistics(context.Context, *GetStatisticsRequest) (*Reply, error)
	mustEmbedUnimplementedBusinessLogicServer()
}

// UnimplementedBusinessLogicServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBusinessLogicServer struct{}

func (UnimplementedBusinessLogicServer) GetData(context.Context, *GetDataRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedBusinessLogicServer) PostData(context.Context, *PostDataRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostData not implemented")
}
func (UnimplementedBusinessLogicServer) UpdateData(context.Context, *UpdateDataRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateData not implemented")
}
func (UnimplementedBusinessLogicServer) DeleteData(context.Context, *DeleteDataRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedBusinessLogicServer) GetStatistics(context.Context, *GetStatisticsRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedBusinessLogicServer) mustEmbedUnimplementedBusinessLogicServer() {}
func (UnimplementedBusinessLogicServer) testEmbeddedByValue()                       {}

// UnsafeBusinessLogicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessLogicServer will
// result in compilation errors.
type UnsafeBusinessLogicServer interface {
	mustEmbedUnimplementedBusinessLogicServer()
}

func RegisterBusinessLogicServer(s grpc.ServiceRegistrar, srv BusinessLogicServer) {
	// If the following call pancis, it indicates UnimplementedBusinessLogicServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BusinessLogic_ServiceDesc, srv)
}

func _BusinessLogic_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessLogicServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessLogic_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessLogicServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessLogic_PostData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessLogicServer).PostData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessLogic_PostData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessLogicServer).PostData(ctx, req.(*PostDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessLogic_UpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessLogicServer).UpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessLogic_UpdateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessLogicServer).UpdateData(ctx, req.(*UpdateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessLogic_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessLogicServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessLogic_DeleteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessLogicServer).DeleteData(ctx, req.(*DeleteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessLogic_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessLogicServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessLogic_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessLogicServer).GetStatistics(ctx, req.(*GetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessLogic_ServiceDesc is the grpc.ServiceDesc for BusinessLogic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessLogic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.businessLogic",
	HandlerType: (*BusinessLogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _BusinessLogic_GetData_Handler,
		},
		{
			MethodName: "PostData",
			Handler:    _BusinessLogic_PostData_Handler,
		},
		{
			MethodName: "UpdateData",
			Handler:    _BusinessLogic_UpdateData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _BusinessLogic_DeleteData_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _BusinessLogic_GetStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/backend.proto",
}
